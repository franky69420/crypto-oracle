version: '3.8'

services:
  # Application principale
  crypto-oracle:
    build:
      context: .
      dockerfile: Dockerfile
    image: crypto-oracle:latest
    container_name: crypto-oracle-app
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-crypto_oracle}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-crypto_oracle_pass}
      - POSTGRES_DB=${POSTGRES_DB:-crypto_oracle}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=0
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - API_PORT=${API_PORT:-3000}
    volumes:
      - ./config:/app/config
      - app-logs:/app/logs
    ports:
      - "${API_PORT:-3000}:3000"
    networks:
      - crypto-oracle-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: ["./app", "-config", "/app/config/prod.yaml"]

  # Base de donn√©es
  postgres:
    image: postgres:15-alpine
    container_name: crypto-oracle-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-crypto_oracle}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-crypto_oracle_pass}
      - POSTGRES_DB=${POSTGRES_DB:-crypto_oracle}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "${POSTGRES_EXTERNAL_PORT:-5433}:5432"
    networks:
      - crypto-oracle-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_oracle}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["-c", "shared_buffers=256MB", "-c", "max_connections=200"]

  # Cache Redis
  redis:
    image: redis:7-alpine
    container_name: crypto-oracle-redis
    restart: unless-stopped
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_EXTERNAL_PORT:-6380}:6379"
    networks:
      - crypto-oracle-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-}"]

  # Traefik pour le routage (optionnel, pour l'exposition via HTTPS)
  traefik:
    image: traefik:v2.9
    container_name: crypto-oracle-traefik
    restart: unless-stopped
    depends_on:
      - crypto-oracle
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik:/etc/traefik
      - traefik-certs:/letsencrypt
    networks:
      - crypto-oracle-network
    command:
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL:-contact@example.com}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--log.level=${TRAEFIK_LOG_LEVEL:-INFO}"
    labels:
      - "traefik.enable=true"

  # Prometheus pour la surveillance (optionnel)
  prometheus:
    image: prom/prometheus:v2.43.0
    container_name: crypto-oracle-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - crypto-oracle-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`monitoring.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  # Grafana pour la visualisation (optionnel)
  grafana:
    image: grafana/grafana:9.5.1
    container_name: crypto-oracle-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - crypto-oracle-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`dashboard.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

volumes:
  postgres-data:
  redis-data:
  app-logs:
  traefik-certs:
  prometheus-data:
  grafana-data:

networks:
  crypto-oracle-network:
    driver: bridge 
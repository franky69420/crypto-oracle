version: '3.8'

services:
  # Main API service
  api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    restart: always
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=prod
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - DB_HOST=timescaledb
    volumes:
      - ../config:/app/config
    depends_on:
      - redis
      - timescaledb
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crypto_network

  # Token Engine service
  token_engine:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    restart: always
    environment:
      - APP_ENV=prod
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - DB_HOST=timescaledb
      - SERVICE_TYPE=token_engine
    volumes:
      - ../config:/app/config
    depends_on:
      - redis
      - timescaledb
    healthcheck:
      test: ["CMD", "wget", "--spider", "--quiet", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - crypto_network

  # Memory of Trust service
  memory_trust:
    build:
      context: ..
      dockerfile: docker/Dockerfile.worker
    restart: always
    environment:
      - APP_ENV=prod
      - LOG_LEVEL=info
      - REDIS_HOST=redis
      - DB_HOST=timescaledb
      - SERVICE_TYPE=memory_trust
    volumes:
      - ../config:/app/config
    depends_on:
      - redis
      - timescaledb
    networks:
      - crypto_network

  # Database (TimescaleDB)
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-crypto_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-crypto_pass}
      - POSTGRES_DB=${POSTGRES_DB:-crypto_db}
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crypto_user} -d ${POSTGRES_DB:-crypto_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - crypto_network

  # Redis for cache and streams
  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - crypto_network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - crypto_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    restart: always
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - crypto_network

networks:
  crypto_network:
    driver: bridge

volumes:
  timescale_data:
  redis_data:
  prometheus_data:
  grafana_data: 